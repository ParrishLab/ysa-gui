name: Build and Release

on:
  push:
    tags:
      - "v*"

jobs:
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - arch: x86_64
            python-version: 3.10.9
          - arch: arm64
            python-version: 3.10.9

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python for ${{ matrix.arch }}
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            
            echo 'export HOMEBREW_PREFIX="/usr/local"' >> $HOME/.bash_profile
            echo 'export HOMEBREW_CELLAR="/usr/local/Cellar"' >> $HOME/.bash_profile
            echo 'export HOMEBREW_REPOSITORY="/usr/local/Homebrew"' >> $HOME/.bash_profile
            echo 'export PATH="/usr/local/bin:/usr/local/sbin:$PATH"' >> $HOME/.bash_profile
            echo 'eval "$(/usr/local/bin/brew shellenv)"' >> $HOME/.bash_profile
            
            source $HOME/.bash_profile
            
            arch -x86_64 brew install python@3.10 cmake pybind11 hdf5
            
            arch -x86_64 /bin/bash -c "/usr/local/bin/python3.10 -m venv venv"
            source venv/bin/activate
            python3.10 -m pip install --break-system-packages pyinstaller sphinx sphinx-copybutton sphinxcontrib-video pydata_sphinx_theme setuptools wheel numpy pybind11 requests scipy PyQt5 pyqtgraph opencv-python matplotlib lttbc pyqtdarktheme==2.1.0 h5py scikit-learn tqdm Pillow pywavelets pyqtwebengine pandas
          else
            brew install python@3.10 cmake pybind11 hdf5
            python3.10 -m venv venv
            source venv/bin/activate
            python3.10 -m pip install pyinstaller sphinx sphinx-copybutton sphinxcontrib-video pydata_sphinx_theme setuptools wheel numpy pybind11 requests scipy PyQt5 pyqtgraph opencv-python matplotlib lttbc pyqtdarktheme==2.1.0 h5py scikit-learn tqdm Pillow pywavelets pyqtwebengine pandas
          fi

      - name: Build C++ Extensions
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            source $HOME/.bash_profile
          fi
          source venv/bin/activate

          # Dynamically find HDF5 installation paths
          HDF5_DIR=$(brew --prefix hdf5)
          HDF5_INCLUDE_DIR="$HDF5_DIR/include"
          HDF5_LIB_DIR="$HDF5_DIR/lib"

          # Change to the extensions directory
          cd ${{ github.workspace }}/src/helpers/extensions

          # Build and install the extensions
          MACOSX_DEPLOYMENT_TARGET="12.0" \
          CXXFLAGS="-std=c++17 -O3 -arch ${{ matrix.arch }}" \
          LDFLAGS="-arch ${{ matrix.arch }}" \
          python3.10 setup.py build_ext --inplace

          # Verify the built extensions
          ls -l *.so

      - name: Build documentation
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            source $HOME/.bash_profile
            arch -x86_64 /bin/bash -c "source venv/bin/activate && cd docs && make html"
          else
            source venv/bin/activate
            cd docs
            make html
          fi

      - name: Build Updater Application
        env:
          ARCHFLAGS: "-arch ${{ matrix.arch }}"
        run: |
          source venv/bin/activate
          pyinstaller --noconfirm --clean \
            "${{ github.workspace }}/src/helpers/update/updater.spec"

          # Create the Application Support directory structure in package_root
          mkdir -p "${{ github.workspace }}/package_root/Library/Application Support/MEA GUI"

          # Copy the updater application
          cp -R "${{ github.workspace }}/dist/MEAUpdater.app" \
            "${{ github.workspace }}/package_root/Library/Application Support/MEA GUI/"

      - name: Build with PyInstaller
        env:
          ARCHFLAGS: "-arch ${{ matrix.arch }}"
          MACOSX_DEPLOYMENT_TARGET: "12.0"
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            source $HOME/.bash_profile
            source venv/bin/activate
            arch -x86_64 /bin/bash -c 'source venv/bin/activate && HDF5_DIR="$(arch -x86_64 brew --prefix hdf5)" pyinstaller --noconfirm --onedir --windowed \
              --target-architecture ${{ matrix.arch }} \
              --hidden-import h5py.defs \
              --hidden-import h5py.utils \
              --hidden-import h5py._proxy \
              --collect-data h5py \
              ${{ github.workspace }}/src/main.py \
              --icon=${{ github.workspace }}/resources/icon.icns \
              --add-data "${{ github.workspace }}/docs/_build/:." \
              --add-data "${{ github.workspace }}/src/helpers/mat/SzDetectCat.m:." \
              --add-data "${{ github.workspace }}/src/helpers/mat/save_channel_to_mat.m:." \
              --add-data "${{ github.workspace }}/src/helpers/mat/getChs.m:." \
              --add-data "${{ github.workspace }}/src/helpers/mat/get_cat_envelop.m:." \
              --additional-hooks-dir "${{ github.workspace }}/hooks/" \
              --add-data "${{ github.workspace }}/src/helpers/mat/*.m:." \
              --add-binary "$(arch -x86_64 brew --prefix hdf5)/lib/libhdf5.dylib:." \
              --add-binary "$(arch -x86_64 brew --prefix hdf5)/lib/libhdf5_hl.dylib:." \
              --add-data "${{ github.workspace }}/resources/fonts/GeistMonoNerdFontMono-Regular.otf:."'
          else
            source venv/bin/activate
            HDF5_DIR="$(brew --prefix hdf5)" pyinstaller --noconfirm --onedir --windowed \
              --target-architecture ${{ matrix.arch }} \
              --hidden-import h5py.defs \
              --hidden-import h5py.utils \
              --hidden-import h5py._proxy \
              --collect-data h5py \
              ${{ github.workspace }}/src/main.py \
              --icon=${{ github.workspace }}/resources/icon.icns \
              --add-data "${{ github.workspace }}/docs/_build/:." \
              --add-data "${{ github.workspace }}/src/helpers/mat/SzDetectCat.m:." \
              --add-data "${{ github.workspace }}/src/helpers/mat/save_channel_to_mat.m:." \
              --add-data "${{ github.workspace }}/src/helpers/mat/getChs.m:." \
              --add-data "${{ github.workspace }}/src/helpers/mat/get_cat_envelop.m:." \
              --additional-hooks-dir "${{ github.workspace }}/hooks/" \
              --add-data "${{ github.workspace }}/src/helpers/mat/*.m:." \
              --add-binary "$(brew --prefix hdf5)/lib/libhdf5.dylib:." \
              --add-binary "$(brew --prefix hdf5)/lib/libhdf5_hl.dylib:." \
              --add-data "${{ github.workspace }}/resources/fonts/GeistMonoNerdFontMono-Regular.otf:."
          fi

      - name: Prepare Package
        run: |
          mkdir -p ${{ github.workspace }}/package_root/MEA\ GUI.app
          rm -rf ${{ github.workspace }}/package_root/MEA\ GUI.app
          cp -R ${{ github.workspace }}/dist/main.app ${{ github.workspace }}/package_root/MEA\ GUI.app
          chmod -R 755 ${{ github.workspace }}/package_root/MEA\ GUI.app
          pkgbuild --root ${{ github.workspace }}/package_root --identifier com.booka66.meagui --install-location /Applications --version 1.0 ${{ github.workspace }}/MEA_GUI_MacOS_${{ matrix.arch }}.pkg

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-package-${{ matrix.arch }}
          path: ${{ github.workspace }}/MEA_GUI_MacOS_${{ matrix.arch }}.pkg

  build-windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.9

      - name: Setup Visual Studio Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          toolset: 14.29

      - name: Create Build Directories
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "${{ github.workspace }}/build"
          New-Item -ItemType Directory -Force -Path "${{ github.workspace }}/dist"

      - name: Download and Debug HDF5
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/HDFGroup/hdf5/releases/download/hdf5_1.14.5/hdf5-1.14.5-win-vs2022_cl.zip" -OutFile "hdf5.zip"
          7z x hdf5.zip
          Write-Host "Current directory contents:"
          Get-ChildItem -Force
          Write-Host "Finding HDF5 directory:"
          Get-ChildItem -Recurse -Filter "hdf5*.dll"

      - name: Setup HDF5
        shell: pwsh
        run: |
          # Get the actual HDF5 directory name
          $hdf5Dir = Get-ChildItem -Directory | Where-Object { $_.Name -like "hdf5*" } | Select-Object -First 1
          Write-Host "Found HDF5 directory: $($hdf5Dir.Name)"

          # Create the target directory
          New-Item -ItemType Directory -Force -Path "${{ github.workspace }}/HDF5-1.14.5-win64"

          # Move contents
          Move-Item -Path "$($hdf5Dir.FullName)/*" -Destination "${{ github.workspace }}/HDF5-1.14.5-win64/"

          # Extract the inner zip file
          Push-Location "${{ github.workspace }}/HDF5-1.14.5-win64"
          7z x HDF5-1.14.5-win64.zip

          # Clear existing files before moving
          Remove-Item -Path * -Exclude "HDF5-1.14.5-win64" -Force

          # Move files from nested directory up one level
          Move-Item -Path "HDF5-1.14.5-win64/*" -Destination "./"
          Remove-Item -Path "HDF5-1.14.5-win64" -Recurse -Force
          Pop-Location

          # Verify the contents
          Write-Host "Final directory contents:"
          Get-ChildItem "${{ github.workspace }}/HDF5-1.14.5-win64"

      - name: Setup Environment
        shell: pwsh
        run: |
          echo "${{ github.workspace }}/HDF5-1.14.5-win64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "HDF5_DIR=${{ github.workspace }}/HDF5-1.14.5-win64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m venv venv
          .\venv\Scripts\Activate.ps1

          pip install pyinstaller sphinx sphinx-copybutton sphinxcontrib-video pydata_sphinx_theme setuptools wheel numpy pybind11 requests scipy PyQt5 pyqtgraph opencv-python matplotlib lttbc pyqtdarktheme==2.1.0 h5py scikit-learn tqdm Pillow pywavelets pyqtwebengine pandas zstandard "urllib3<2"

          # Verify installations
          pip list

      - name: Build C++ Extensions
        shell: pwsh
        run: |
          .\venv\Scripts\Activate.ps1
          cd "${{ github.workspace }}/src/helpers/extensions"

          # Set MSVC compiler flags
          $env:CL = "/MP /EHsc"

          # Debug information
          Write-Host "Current directory:"
          Get-Location
          Write-Host "Directory contents:"
          Get-ChildItem
          Write-Host "HDF5 Directory contents:"
          Get-ChildItem "${{ github.workspace }}/HDF5-1.14.5-win64"

          # Build extensions
          python win_setup.py build_ext --inplace -v

          # Verify built extensions
          Get-ChildItem *.pyd

      - name: Build documentation
        shell: pwsh
        run: |
          .\venv\Scripts\Activate.ps1
          cd docs
          $env:PYTHONPATH = "$env:PYTHONPATH;$PWD"
          sphinx-build -M html . _build
          cd ..

      - name: Build with PyInstaller
        shell: pwsh
        run: |
          .\venv\Scripts\Activate.ps1
          cd src\helpers\update

          $workspace = "${{ github.workspace }}"
          $HDF5_DIR = "$workspace/HDF5-1.14.5-win64"

          pyinstaller --collect-submodules=sz_se_detect --noconfirm --onedir --windowed `
            --hidden-import zstandard `
            --hidden-import urllib3 `
            --hidden-import h5py.defs `
            --hidden-import h5py.utils `
            --hidden-import h5py._proxy `
            --collect-data h5py `
            "$workspace\src\main.py" `
            --icon="$workspace\resources\icon.ico" `
            --add-data "$workspace\docs\_build/;." `
            --add-data "$workspace\src\helpers\mat\SzDetectCat.m;." `
            --add-data "$workspace\src\helpers\mat\save_channel_to_mat.m;." `
            --add-data "$workspace\src\helpers\mat\getChs.m;." `
            --add-data "$workspace\src\helpers\mat\get_cat_envelop.m;." `
            --additional-hooks-dir "$workspace\hooks\" `
            --add-data "$workspace\src\helpers\mat\*.m;." `
            --add-data "$workspace\resources\fonts\GeistMonoNerdFontMono-Regular.otf;." `
            --add-binary "$HDF5_DIR\bin\hdf5.dll;." `
            --add-binary "$HDF5_DIR\bin\hdf5_cpp.dll;."

      - name: Create Installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: src/helpers/update/MEA_GUI_Installer.iss

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: ${{ github.workspace }}/src/helpers/update/Output/MEA_GUI_Windows.exe

  release:
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download MacOS Intel Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-package-x86_64

      - name: Download MacOS Silicon Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-package-arm64

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-package

      - name: Get Release Info
        id: release_info
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          release_url=$(gh api \
            --method GET \
            /repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} \
            --jq .upload_url)
          echo "UPLOAD_URL=$release_url" >> $GITHUB_ENV

      - name: Upload macOS Intel Package to Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GIT_TOKEN }}
          files: MEA_GUI_MacOS_x86_64.pkg
          name: MEA_GUI_MacOS_Intel.pkg
          fail_on_unmatched_files: true

      - name: Upload macOS Silicon Package to Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GIT_TOKEN }}
          files: MEA_GUI_MacOS_arm64.pkg
          name: MEA_GUI_MacOS_Silicon.pkg
          fail_on_unmatched_files: true

      - name: Upload Windows Package to Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GIT_TOKEN }}
          files: MEA_GUI_Windows.exe
          name: MEA_GUI_Windows.exe
          fail_on_unmatched_files: true
