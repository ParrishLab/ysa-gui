name: Build and Release

on:
  push:
    tags:
      - "v*"

jobs:
  build-extensions:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        arch:
          - x86_64
          - arm64
        exclude:
          - os: windows-latest
            arch: arm64

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.9
          architecture: ${{ matrix.arch == 'arm64' && 'arm64' || 'x64' }}

      - name: Install dependencies
        run: |
          python -m venv venv

          # Activate virtual environment
          if [ "$RUNNER_OS" == "Windows" ]; then
            venv\Scripts\activate
          else
            source venv/bin/activate
          fi

          # Install build dependencies
          pip install setuptools pybind11 wheel

      - name: Build Extensions (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          source venv/bin/activate

          # Handle x86_64 and arm64 separately
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            # Set up x86_64 Homebrew and Python
            arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            echo 'export PATH="/usr/local/bin:$PATH"' >> $HOME/.bash_profile
            source $HOME/.bash_profile
            
            # Install HDF5 for x86_64
            arch -x86_64 brew install hdf5
            HDF5_DIR=$(arch -x86_64 brew --prefix hdf5)
          else
            # Use standard Homebrew for arm64
            brew install hdf5
            HDF5_DIR=$(brew --prefix hdf5)
          fi

          # Build extensions
          ARCHFLAGS="-arch ${{ matrix.arch }}" \
          HDF5_DIR="$HDF5_DIR" \
          python setup.py build_ext --inplace

      - name: Build Extensions (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          venv\Scripts\activate
          python setup.py build_ext --inplace

      - name: Upload Extension Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-extensions-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            *.pyd
            *.so
            *.dll

  build-macos:
    needs: [build-extensions]
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - arch: x86_64
            python-version: 3.10.9
          - arch: arm64
            python-version: 3.10.9

    steps:
      - uses: actions/checkout@v3

      - name: Download Python Extensions
        uses: actions/download-artifact@v3
        with:
          name: python-extensions-macos-latest-${{ matrix.arch }}
          path: ${{ github.workspace }}/src/helpers/extensions/

      - name: Set up Python for ${{ matrix.arch }}
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            # Install x86_64 Homebrew in /usr/local
            arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            
            # Explicitly set up Homebrew environment
            echo 'export HOMEBREW_PREFIX="/usr/local"' >> $HOME/.bash_profile
            echo 'export HOMEBREW_CELLAR="/usr/local/Cellar"' >> $HOME/.bash_profile
            echo 'export HOMEBREW_REPOSITORY="/usr/local/Homebrew"' >> $HOME/.bash_profile
            echo 'export PATH="/usr/local/bin:/usr/local/sbin:$PATH"' >> $HOME/.bash_profile
            echo 'eval "$(/usr/local/bin/brew shellenv)"' >> $HOME/.bash_profile
            
            # Source the profile to set up environment
            source $HOME/.bash_profile
            
            # Install Python and set up virtual environment
            arch -x86_64 brew install python@3.10
            
            # Use the full path to Python and create virtual environment
            arch -x86_64 /bin/bash -c "/usr/local/bin/python3.10 -m venv venv"
            source venv/bin/activate && pip install --break-system-packages pyinstaller sphinx sphinx-copybutton sphinxcontrib-video pydata_sphinx_theme
          else
            brew install python@3.10
            python3 -m venv venv
            source venv/bin/activate && pip install pyinstaller sphinx sphinx-copybutton sphinxcontrib-video pydata_sphinx_theme
          fi

      - name: Build documentation
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            source $HOME/.bash_profile
            arch -x86_64 /bin/bash -c "source venv/bin/activate && cd docs && make html"
          else
            source venv/bin/activate
            cd docs
            make html
          fi

      - name: Install HDF5
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            source $HOME/.bash_profile
            arch -x86_64 brew install hdf5
          else
            brew install hdf5
          fi

      - name: Build with PyInstaller
        env:
          ARCHFLAGS: "-arch ${{ matrix.arch }}"
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            source $HOME/.bash_profile
            source venv/bin/activate
            arch -x86_64 /bin/bash -c "source venv/bin/activate && HDF5_DIR='$(arch -x86_64 brew --prefix hdf5)' pyinstaller --noconfirm --onedir --windowed \
              --target-architecture ${{ matrix.arch }} \
              --exclude-module PIL \
              --exclude-module Pillow \
              --hidden-import h5py.defs \
              --hidden-import h5py.utils \
              --hidden-import h5py._proxy \
              --collect-data h5py \
              ${{ github.workspace }}/src/main.py \
              --icon=${{ github.workspace }}/resources/icon.icns \
              --add-data '${{ github.workspace }}/docs/_build/:.'\
              --add-data '${{ github.workspace }}/src/helpers/mat/SzDetectCat.m:.'\
              --add-data '${{ github.workspace }}/src/helpers/mat/save_channel_to_mat.m:.'\
              --add-data '${{ github.workspace }}/src/helpers/mat/getChs.m:.'\
              --add-data '${{ github.workspace }}/src/helpers/mat/get_cat_envelop.m:.'\
              --additional-hooks-dir '${{ github.workspace }}/hooks/' \
              --add-data '${{ github.workspace }}/src/helpers/mat/*.m:.'\
              --add-binary '$(arch -x86_64 brew --prefix hdf5)/lib/libhdf5.dylib:.'\
              --add-binary '$(arch -x86_64 brew --prefix hdf5)/lib/libhdf5_hl.dylib:.'"
          else
            source venv/bin/activate
            HDF5_DIR="$(brew --prefix hdf5)" pyinstaller --noconfirm --onedir --windowed \
              --target-architecture ${{ matrix.arch }} \
              --exclude-module PIL \
              --exclude-module Pillow \
              --hidden-import h5py.defs \
              --hidden-import h5py.utils \
              --hidden-import h5py._proxy \
              --collect-data h5py \
              ${{ github.workspace }}/src/main.py \
              --icon=${{ github.workspace }}/resources/icon.icns \
              --add-data "${{ github.workspace }}/docs/_build/:." \
              --add-data "${{ github.workspace }}/src/helpers/mat/SzDetectCat.m:." \
              --add-data "${{ github.workspace }}/src/helpers/mat/save_channel_to_mat.m:." \
              --add-data "${{ github.workspace }}/src/helpers/mat/getChs.m:." \
              --add-data "${{ github.workspace }}/src/helpers/mat/get_cat_envelop.m:." \
              --additional-hooks-dir "${{ github.workspace }}/hooks/" \
              --add-data "${{ github.workspace }}/src/helpers/mat/*.m:." \
              --add-binary "$(brew --prefix hdf5)/lib/libhdf5.dylib:." \
              --add-binary "$(brew --prefix hdf5)/lib/libhdf5_hl.dylib:."
          fi

      - name: Prepare Package
        run: |
          mkdir -p ${{ github.workspace }}/package_root/MEA\ GUI.app
          rm -rf ${{ github.workspace }}/package_root/MEA\ GUI.app
          cp -R ${{ github.workspace }}/dist/main.app ${{ github.workspace }}/package_root/MEA\ GUI.app
          cp ${{ github.workspace }}/resources/fonts/GeistMonoNerdFontMono-Regular.otf ${{ github.workspace }}/package_root/MEA\ GUI.app/Contents/Resources/
          chmod -R 755 ${{ github.workspace }}/package_root/MEA\ GUI.app
          pkgbuild --root ${{ github.workspace }}/package_root --identifier com.booka66.meagui --install-location / ${{ github.workspace }}/MEA_GUI_MacOS_${{ matrix.arch }}.pkg

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-packages
          path: ${{ github.workspace }}/MEA_GUI_MacOS_${{ matrix.arch }}.pkg

  build-windows:
    needs: [build-extensions]
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download Python Extensions
        uses: actions/download-artifact@v3
        with:
          name: python-extensions-windows-latest-x86_64
          path: ${{ github.workspace }}/src/helpers/extensions/

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.9

      - name: Install dependencies
        run: |
          python -m venv venv
          venv\Scripts\activate
          pip install pyinstaller sphinx sphinx-copybutton sphinxcontrib-video pydata_sphinx_theme

      - name: Build documentation
        run: |
          cd docs
          make html

      - name: Build with PyInstaller
        run: |
          venv\Scripts\activate
          pyinstaller --collect-submodules=sz_se_detect --noconfirm  --onedir --windowed ${{ github.workspace }}/src/main.py --icon=${{ github.workspace }}/resources/icon.ico --add-data "${{ github.workspace }}/docs/_build/:." --add-data "${{ github.workspace }}/src/helpers/mat/SzDetectCat.m:." --add-data "${{ github.workspace }}/src/helpers/mat/save_channel_to_mat.m:." --add-data "${{ github.workspace }}/src/helpers/mat/getChs.m:." --add-data "${{ github.workspace }}/src/helpers/mat/get_cat_envelop.m:." --additional-hooks-dir "${{ github.workspace }}/hooks/" --add-data "${{ github.workspace }}/src/helpers/mat/*.m:." --add-data "${{ github.workspace }}/resources/fonts/GeistMonoNerdFontMono-Regular.otf"

          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" /Q ${{ github.workspace }}\MEA_GUI_Installer.iss

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-package
          path: ${{ github.workspace }}/Output/MEA_GUI_Windows.exe

  release:
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download MacOS Artifacts
        uses: actions/download-artifact@v3
        with:
          name: macos-packages

      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-package

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload macOS Intel Package to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: MEA_GUI_MacOS_x86_64.pkg
          asset_name: MEA_GUI_MacOS_Intel.pkg
          asset_content_type: application/octet-stream

      - name: Upload macOS Silicon Package to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: MEA_GUI_MacOS_arm64.pkg
          asset_name: MEA_GUI_MacOS_Silicon.pkg
          asset_content_type: application/octet-stream

      - name: Upload Windows Package to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: MEA_GUI_Windows.exe
          asset_name: MEA_GUI_Windows.exe
          asset_content_type: application/octet-stream
