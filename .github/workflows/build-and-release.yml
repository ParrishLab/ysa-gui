name: Build and Release

permissions:
  contents: write

on:
  push:
    branches: [ develop ]     # CI for integration
    tags: [ "v*" ]  # release builds

  pull_request:
    branches: [ main ]        # gate merges to main

  workflow_dispatch: {}

jobs:
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - arch: x86_64
            python-version: 3.10.9
          - arch: arm64
            python-version: 3.10.9

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      # Install Python version determined by the matrix
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Compute version (tag or dev)
        id: ver
        shell: pwsh
        run: |
          $ref = "${{ github.ref_name }}"
          if ($ref -match '^v(\d+\.\d+\.\d+.*)$') { $v = $Matches[1] }
          else { $shortsha = "${{ github.sha }}"[0..6] -join ''; $v = "0.0.0-dev+$shortsha" }
          "version=$v" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Update Constants.py version
        run: |
          sed -E -i '' 's/__version__\s*=\s*".*"/__version__ = "'${{ steps.ver.outputs.version }}'"/' src/Constants.py

      # Install build deps via Homebrew (ARM64 job)
      - name: Install build deps (arm64)
        if: ${{ matrix.arch == 'arm64' }}
        run: |
          brew update
          brew list --formula cmake >/dev/null 2>&1 || brew install --formula cmake
          brew list --formula pybind11 >/dev/null 2>&1 || brew install --formula pybind11
          brew list --formula hdf5 >/dev/null 2>&1 || brew install --formula hdf5

      # Install build deps via Rosetta Homebrew (x86_64 job)
      - name: Install build deps (x86_64 via Rosetta)
        if: ${{ matrix.arch == 'x86_64' }}
        run: |
          sudo /usr/sbin/softwareupdate --install-rosetta --agree-to-license
          if [ ! -x /usr/local/bin/brew ]; then
            arch -x86_64 /bin/bash -lc "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          fi
          arch -x86_64 /usr/local/bin/brew update
          arch -x86_64 /usr/local/bin/brew list --formula cmake >/dev/null 2>&1 || arch -x86_64 /usr/local/bin/brew install --formula cmake
          arch -x86_64 /usr/local/bin/brew list --formula pybind11 >/dev/null 2>&1 || arch -x86_64 /usr/local/bin/brew install --formula pybind11
          arch -x86_64 /usr/local/bin/brew list --formula hdf5 >/dev/null 2>&1 || arch -x86_64 /usr/local/bin/brew install --formula hdf5

      # Install deps into the active venv before compiling C++ extensions
      - name: Install Python deps for build (macOS)
        if: ${{ matrix.arch == 'x86_64' }}
        run: |
          arch -x86_64 python3 -m venv venv_x86
          source venv_x86/bin/activate
          python -m pip install --upgrade pip wheel
          pip install -r src/helpers/update/requirements.txt

      - name: Install Python deps for build (macOS arm64)
        if: ${{ matrix.arch == 'arm64' }}
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip wheel
          pip install -r src/helpers/update/requirements.txt

      - name: Build C++ Extensions
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            source "$HOME/.bash_profile"
            # ensure venv_x86 exists (created earlier, but safe to check)
            [ -d venv_x86 ] || arch -x86_64 python3 -m venv venv_x86
            source venv_x86/bin/activate
          else
            [ -d venv ] || python -m venv venv
            source venv/bin/activate
          fi 

          cd ${{ github.workspace }}/src/helpers/extensions
          CXXFLAGS="-std=c++17 -O3 -arch ${{ matrix.arch }}" \
          LDFLAGS="-arch ${{ matrix.arch }}" \
          python setup.py build_ext --inplace
          ls -l *.so

      - name: Build documentation
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            source $HOME/.bash_profile
            arch -x86_64 /bin/bash -c "source venv_x86/bin/activate && cd docs && make html"
          else
            source venv/bin/activate
            cd docs
            make html
          fi

      - name: Build with PyInstaller
        env:
          ARCHFLAGS: "-arch ${{ matrix.arch }}"
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            source venv_x86/bin/activate
          else
            source venv/bin/activate
          fi
          pyinstaller --noconfirm main.spec

      - name: Prepare Package
        run: |
          # Clean and recreate package root
          rm -rf "${{ github.workspace }}/package_root"
          mkdir -p "${{ github.workspace }}/package_root"

          # Copy the built .app from PyInstaller's onedir layout
          cp -R "${{ github.workspace }}/dist/YsaGUI/YsaGUI.app" "${{ github.workspace }}/package_root/YSA GUI.app"
          chmod -R 755 "${{ github.workspace }}/package_root/YSA GUI.app"

          # Use an identifier that matches your spec's bundle_identifier
          pkgbuild \
            --root "${{ github.workspace }}/package_root" \
            --identifier edu.byu.parrishlab.ysagui \
            --install-location /Applications \
            --version "${{ steps.ver.outputs.version }}" \
          "${{ github.workspace }}/YSA_GUI_MacOS_${{ matrix.arch }}.pkg"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-package-${{ matrix.arch }}
          path: ${{ github.workspace }}/YSA_GUI_MacOS_${{ matrix.arch }}.pkg

  build-windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.9

      - name: Setup Visual Studio Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          toolset: 14.29

      # Compute version once per job
      - name: Compute version (tag or dev)
        id: ver
        shell: pwsh
        run: |
          $ref = "${{ github.ref_name }}"
          if ($ref -match '^v(\d+\.\d+\.\d+.*)$') {
            $v = $Matches[1]
          } else {
            $shortsha = "${{ github.sha }}"[0..6] -join ''
            $v = "0.0.0-dev+$shortsha"
          }
          "version=$v" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      # ðŸ”½ Insert the Constants.py update step here
      - name: Update Constants.py version
        shell: pwsh
        run: |
          $ver = '${{ steps.ver.outputs.version }}'
          (Get-Content 'src/Constants.py' -Raw) `
            -replace '__version__\s*=\s*["''][^"'']+["'']', "__version__ = `"$ver`"" `
            | Set-Content 'src/Constants.py' -Encoding utf8


      - name: Create Build Directories
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "${{ github.workspace }}/build"
          New-Item -ItemType Directory -Force -Path "${{ github.workspace }}/dist"

      - name: Download and Debug HDF5
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/HDFGroup/hdf5/releases/download/hdf5_1.14.5/hdf5-1.14.5-win-vs2022_cl.zip" -OutFile "hdf5.zip"
          7z x hdf5.zip
          Write-Host "Current directory contents:"
          Get-ChildItem -Force
          Write-Host "Finding HDF5 directory:"
          Get-ChildItem -Recurse -Filter "hdf5*.dll"

      - name: Setup HDF5
        shell: pwsh
        run: |
          # Get the actual HDF5 directory name
          $hdf5Dir = Get-ChildItem -Directory | Where-Object { $_.Name -like "hdf5*" } | Select-Object -First 1
          Write-Host "Found HDF5 directory: $($hdf5Dir.Name)"

          # Create the target directory
          New-Item -ItemType Directory -Force -Path "${{ github.workspace }}/HDF5-1.14.5-win64"

          # Move contents
          Move-Item -Path "$($hdf5Dir.FullName)/*" -Destination "${{ github.workspace }}/HDF5-1.14.5-win64/"

          # Extract the inner zip file
          Push-Location "${{ github.workspace }}/HDF5-1.14.5-win64"
          7z x HDF5-1.14.5-win64.zip

          # Clear existing files before moving
          Remove-Item -Path * -Exclude "HDF5-1.14.5-win64" -Force

          # Move files from nested directory up one level
          Move-Item -Path "HDF5-1.14.5-win64/*" -Destination "./"
          Remove-Item -Path "HDF5-1.14.5-win64" -Recurse -Force
          Pop-Location

          # Verify the contents
          Write-Host "Final directory contents:"
          Get-ChildItem "${{ github.workspace }}/HDF5-1.14.5-win64"

      - name: Setup Environment
        shell: pwsh
        run: |
          echo "${{ github.workspace }}/HDF5-1.14.5-win64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "HDF5_DIR=${{ github.workspace }}/HDF5-1.14.5-win64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m venv venv
          .\venv\Scripts\Activate.ps1

          pip install -r src/helpers/update/requirements.txt

          # Verify installations
          pip list

      - name: Build C++ Extensions
        shell: pwsh
        run: |
          .\venv\Scripts\Activate.ps1
          cd "${{ github.workspace }}/src/helpers/extensions"

          # Set MSVC compiler flags
          $env:CL = "/MP /EHsc"

          # Debug information
          Write-Host "HDF5 Directory contents:"
          Get-ChildItem "${{ github.workspace }}/HDF5-1.14.5-win64"

          # Build extensions
          python win_setup.py build_ext --inplace -v

          # Verify built extensions
          Get-ChildItem *.pyd

      - name: Build documentation
        shell: pwsh
        run: |
          .\venv\Scripts\Activate.ps1
          cd docs
          $env:PYTHONPATH = "$env:PYTHONPATH;$PWD"
          sphinx-build -M html . _build
          cd ..

      - name: Build with PyInstaller
        shell: pwsh
        run: |
          .\venv\Scripts\Activate.ps1
          $env:HDF5_DIR = "${{ github.workspace }}\HDF5-1.14.5-win64"   # keep if you want those DLLs bundled
          pyinstaller --noconfirm main.spec

      #- name: Create Installer
      #  uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
      #  with:
      #    path: src/helpers/update/MEA_GUI_Installer.iss

      - name: List dist contents (Windows)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Test-Path dist)) { throw "dist/ not found" }
          Get-ChildItem -Recurse dist | Select-Object FullName, Length

      # Replacement "Create Installer" block
      - name: Ensure Inno Setup
        shell: pwsh
        run: |
          choco install innosetup --no-progress -y
          $env:Path += ";C:\Program Files (x86)\Inno Setup 6"
          Get-Command iscc -All

      - name: Verify dist output
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Test-Path dist)) { throw "dist/ not found" }
          Get-ChildItem -Recurse dist | Select-Object FullName, Length

      - name: Build installer with ISCC
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $src = Resolve-Path ".\dist\YsaGUI"      # or auto-detect the folder if needed
          $out = Resolve-Path ".\src\helpers\update\Output"
          if (-not (Test-Path $out)) { New-Item -ItemType Directory $out | Out-Null }
          iscc ".\src\helpers\update\MEA_GUI_Installer.iss" `
            /DSourceDir="$src" `
            /DOutputDir="$out" `
            /DAppVersion="${{ steps.ver.outputs.version }}" `
            /F"YSA_GUI_Windows"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: ${{ github.workspace }}/src/helpers/update/Output/YSA_GUI_Windows.exe

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download MacOS Intel Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-package-x86_64

      - name: Download MacOS Silicon Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-package-arm64

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-package

      - name: Get Release Info
        id: release_info
        shell: bash
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          release_url=$(gh api \
            --method GET \
            /repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} \
            --jq .upload_url)
          echo "UPLOAD_URL=$release_url" >> $GITHUB_ENV

      - name: Upload macOS Intel Package to Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ github.token }}
          files: YSA_GUI_MacOS_x86_64.pkg
          name: YSA_GUI_MacOS_Intel.pkg
          fail_on_unmatched_files: true

      - name: Upload macOS Silicon Package to Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ github.token }}
          files: YSA_GUI_MacOS_arm64.pkg
          name: YSA_GUI_MacOS_Silicon.pkg
          fail_on_unmatched_files: true

      - name: Upload Windows Package to Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ github.token }}
          files: YSA_GUI_Windows.exe
          name: YSA_GUI_Windows.exe
          fail_on_unmatched_files: true
